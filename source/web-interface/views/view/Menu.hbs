<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<link href="/styles/css-vars.css" rel="stylesheet" type="text/css">
    <meta http-equiv="Pragma" content="no-cache">
    <script type="text/javascript">
        if(window.parent==window){window.location.href="http://192.168.1.100"}
        document.oncontextmenu=()=>{return false}
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <script type="text/javascript">
        try{document.execCommand('BackgroundImageCache',false,true)}catch(e){}
    </script>
    <script src="/scripts/localiztion/str_menu.js" type="text/JavaScript">
    </script>
    <script src="/scripts/menu.js" type="text/JavaScript">
    </script>
    <script type="text/javascript">
        function ResetStatus(strInfo) {
            window.status = ""; return true;
        }
    </script>
    <style>
        html, body {
            background-color: #1e1f22;
            user-select: none;
            overflow-x: hidden;
        }

        ::-webkit-scrollbar {
            background-color: #1e1f22;
            width: 8px;
            height: 8px;
            border-radius: 0px;
            margin: 4px;
        }
        ::-webkit-scrollbar-thumb {
            background-color: #000;
            border-radius: 8px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background-color: #000; 
        }
        ::-webkit-scrollbar-thumb:active {
            background-color: #000; 
        }
        ::-webkit-scrollbar-corner {
            background-color: #1a1b1e;
        }
        ::-webkit-scrollbar-button {
            display: none;
        }

        body {
            margin: 0px;
        }

        menu {
            margin: 0px;
            padding: 8px 0px;
        }

        menu > ol {
            background-color: #313338;
            border-radius: 50%;
            margin: 4px;
            position: relative;
            left: 10px;
            width: 42px;
            height: 42px;
            overflow: visible;
            padding: 0px;
            cursor: pointer;
            transition: background-color 200ms, border-radius 200ms;
        }

        menu > ol > img {
            width: 42px;
            height: 42px;
        }

        menu > ol:hover, menu > ol.selected {
            background-color: #5865f2;
            border-radius: 25%;
        }

        menu > ol:active {
            transform: translateY(2px);
        }

        menu > hr {
            margin: 10px 15px;
            border: 1px solid #313338;
            border-style: solid;
        }

        .status-icon {
            display: block;
            position: relative;
            width: 14px;
            height: 14px;
            border-radius: 7px;
            right: -26px;
            top: -46px;
            outline: 4px solid #1e1f22;
            background-color: #1e1f22;
            transition: opacity 200ms;
            opacity: 0%;
        }

        .archived-icon {
            position: relative;
            width: 24px;
            height: 24px;
            background-image: url('/images/archived.png');
            background-size: 16px;
            background-repeat: no-repeat;
            background-position: center;
            transform: translate(-8px, -4px);
            background-color: #1e1f22;
            border-radius: 50%;
        }

        .chrome-icon {
            position: relative;
            width: 24px;
            height: 24px;
            background-image: url('/images/chrome.svg');
            background-size: 16px;
            background-repeat: no-repeat;
            background-position: center;
            transform: translate(-8px, -4px);
            background-color: #1e1f22;
            border-radius: 50%;
        }
    </style>
</head>

<body style="margin: 0px;">
    <menu>
        <script type="text/javascript">
            menuInit()
            menuDisplay()
        </script>
    </menu>

    <script>
        let GetDataPending = false
        const statusIconErrors = document.getElementsByClassName('status-icon')
		setInterval(() => {
            if (GetDataPending === true) { return }
            GetDataPending = true
			var xmlHttp =  new XMLHttpRequest()
			xmlHttp.open('GET', '/errors.json')
			xmlHttp.onloadend = (e) => {
            	GetDataPending = false
				if (xmlHttp.status == 200) {
                    /** @type {number} */
					const res = JSON.parse(xmlHttp.responseText)
                    for (let i = 0; i < statusIconErrors.length; i++) {
                        /** @type {HTMLElement} */
                        const statusIconError = statusIconErrors.item(i)
                        if (res === 0) {
                            statusIconError.style.opacity = '0%'
                        statusIconError.title = ''
                        } else if (res === 1) {
                            statusIconError.style.backgroundColor = '#888888'
                            statusIconError.style.opacity = '100%'
                            statusIconError.title = 'Level: Other'
                        } else if (res === 2) {
                            statusIconError.style.backgroundColor = '#ffcd19'
                            statusIconError.style.opacity = '100%'
                            statusIconError.title = 'Level: Warning'
                        } else if (res === 3) {                            
                            statusIconError.style.backgroundColor = '#eb8100'
                            statusIconError.style.opacity = '100%'
                            statusIconError.title = 'Level: Error'
                        } else if (res === 4) {                            
                            statusIconError.style.backgroundColor = '#b82b00'
                            statusIconError.style.opacity = '100%'
                            statusIconError.title = 'Level: Crash'
                        }
                    }
                }
			}
			xmlHttp.send(null)
		}, 2000)
    </script>

    <script>
        const buttons = document.getElementsByTagName("ol");
        for (const button of buttons) {
            button.addEventListener("mousedown", createRipple);
        }

        function createRipple(event) {
            const ripples = document.getElementsByClassName("ripple")
            for (let i = 0; i < ripples.length; i++) {
                const ripple = ripples[i];
                ripple.remove()
            }

            const offset = { x: 0, y: 0 }
            const button = event.currentTarget;
            const circle = document.createElement("span");
            const diameter = Math.max(button.clientWidth, button.clientHeight);
            const radius = diameter / 2;
            circle.style.width = circle.style.height = `${diameter}px`;
            circle.style.left = `${event.clientX - (button.offsetLeft + radius) + offset.x}px`;
            circle.style.top = `${event.clientY - (button.offsetTop + radius) + offset.y}px`;
            circle.classList.add("ripple");
            button.appendChild(circle);
        }
    </script>
</body>

</html>