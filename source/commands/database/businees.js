const Discord = require('discord.js')
const fs = require('fs')
const { DatabaseManager } = require('../../functions/databaseManager.js')

const now = new Date()
const start = new Date(now.getFullYear(), 0, 0)
const diff = now - start
const oneDay = 1000 * 60 * 60 * 24
const dayOfYear = Math.floor(diff / oneDay)

function dayName(dayOfWeek) {
    while (dayOfWeek > 6) {
        dayOfWeek -= 7
    }
    let dayName = '???'
    let days = ['Vas√°rnap', 'H√©tf≈ë', 'Kedd', 'Szerda', 'Cs√ºt√∂rt√∂k', 'P√©ntek', 'Szombat'];
    dayName = days[dayOfWeek];
    return dayName
}
/**
 * @param {Date} date 
 * @returns {string}
 */
function toDateString(date) {
    return date.getFullYear().toString() + ':' + date.getMonth().toString() + ':' + date.getDate().toString()
}

/**
* @param {Discord.User} sender
* @param {DatabaseManager} database
*/
function businessAddToMemoryDetails(sender, database) {
    if (!database.dataBusinesses[sender.id]) {
        database.dataBusinesses[sender.id] = {};
    };
    if (!database.dataBusinesses[sender.id].username) {
        database.dataBusinesses[sender.id].username = sender.username;
    };
    if (!database.dataBusinesses[sender.id].businessIndex) {
        database.dataBusinesses[sender.id].businessIndex = 0;
    };
    if (!database.dataBusinesses[sender.id].businessName) {
        database.dataBusinesses[sender.id].businessName = "N√©vtelen biznisz";
    };
    if (!database.dataBusinesses[sender.id].businessLevel) {
        database.dataBusinesses[sender.id].businessLevel = 0;
    };
    if (!database.dataBusinesses[sender.id].businessUses) {
        database.dataBusinesses[sender.id].businessUses = {};
    };
    if (!database.dataBusinesses[sender.id].businessUses.date) {
        database.dataBusinesses[sender.id].businessUses.date = toDateString(new Date());
    };
    if (!database.dataBusinesses[sender.id].businessUses.day) {
        database.dataBusinesses[sender.id].businessUses.day = dayOfYear;
    };

    database.SaveDatabase()
}

/**
 * @returns {string}
 * @param {Discord.User} sender
 * @param {number} type
 */
function calculateAddMoney(sender, type, database) {
    const aaa = database.dataBusinesses[sender.id].businessUses.date.toString().split(':')
    const lastDate = new Date(aaa[0], aaa[1], aaa[2])
    const nowDate = new Date()
    const difference = nowDate - lastDate
    const differenceInDays = Math.floor(difference / oneDay)

    let returnTestString = ''
    returnTestString += 'last| ' + toDateString(lastDate) + '\n'
    returnTestString += '> now | ' + toDateString(nowDate) + '\n'
    returnTestString += '> diff| ' + differenceInDays.toString() + '\n'

    /**
     * @description 0 = Vas√°rnap; 6 = Szombat
     */
    let daysToCalculate = [0, 0, 0, 0, 0, 0, 0]

    for (let i = 1; i < (differenceInDays + 1); i++) {
        const date2 = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate() - i)
        returnTestString += '\n> ' + i + '|  ' + dayName(date2.getDay()) + '[' + date2.getDay() + ']  ' + toDateString(date2)
        daysToCalculate[date2.getDay()] += 1
    }
    returnTestString += '\n\n> | ' + daysToCalculate

    const differenceInWeeks = Math.min(daysToCalculate[0], daysToCalculate[1])

    returnTestString += '\n\n> | ' + differenceInWeeks

    let finalNumber = 0

    if (type === 1) {
        finalNumber = daysToCalculate[0]
    } else if (type === 2) {
        finalNumber = daysToCalculate[1] + daysToCalculate[2] + daysToCalculate[3] + daysToCalculate[4] + daysToCalculate[5] + daysToCalculate[6]
    } else if (type === 3) {
        finalNumber = daysToCalculate[1] + daysToCalculate[2] + daysToCalculate[3] + daysToCalculate[4] + daysToCalculate[5]
    } else if (type === 4) {
        finalNumber = 1
    }

    returnTestString += '\n\n\n> | ' + finalNumber

    return finalNumber
}

/**
* @param {Discord.Channel} channel
* @param {Discord.User} sender
* @param {boolean} isPrivate
* @param {DatabaseManager} database
*/
module.exports = (channel, sender, isPrivate, database) => {

    database.SaveUserToMemoryAll(sender, sender.username)

    var businessIndex = database.dataBusinesses[sender.id].businessIndex

    var money = database.dataBasic[sender.id].money;

    if (database.dataBusinesses[sender.id].businessIndex > 0) {
        var moneyMakerName = database.dataBusinesses[sender.id].businessName;
        var moneyMakerLevel = database.dataBusinesses[sender.id].businessLevel;

        var moneyMakerImage = ''
        var moneyMakerLevelText = ''

        var uprageCost = 0

        let addMoney = calculateAddMoney(sender, database.dataBusinesses[sender.id].businessIndex, database)
        if (database.dataBusinesses[sender.id].businessIndex === 1) {
            addMoney *= 1335 * database.dataBusinesses[sender.id].businessLevel
        } else if (database.dataBusinesses[sender.id].businessIndex === 2) {
            addMoney *= 181 * database.dataBusinesses[sender.id].businessLevel
        } else if (database.dataBusinesses[sender.id].businessIndex === 3) {
            addMoney *= 189 * database.dataBusinesses[sender.id].businessLevel
        } else if (database.dataBusinesses[sender.id].businessIndex === 4) {

        }

        if (database.dataBusinesses[sender.id].businessIndex === 1) {
            if (moneyMakerLevel === 1) {
                moneyMakerImage = '\\üöè'
                moneyMakerLevelText = 'V√°rosi buszmeg√°ll√≥'
                uprageCost = 10000
            } else if (moneyMakerLevel === 2) {
                moneyMakerImage = '\\üöâ'
                moneyMakerLevelText = 'Vas√∫t√°llom√°s'
                uprageCost = 20000
            } else if (moneyMakerLevel === 3) {
                moneyMakerImage = '\\‚öì'
                moneyMakerLevelText = 'Nemzetk√∂zi kik√∂t≈ë'
                uprageCost = 40000
            } else if (moneyMakerLevel === 4) {
                moneyMakerImage = '\\üõ´'
                moneyMakerLevelText = 'Glob√°lis rep√ºl≈ët√©r'
            }
        } else if (database.dataBusinesses[sender.id].businessIndex === 2) {
            if (moneyMakerLevel === 1) {
                moneyMakerImage = '\\üè™'
                moneyMakerLevelText = 'Vegyesbolt'
                uprageCost = 40000
            } else if (moneyMakerLevel === 2) {
                moneyMakerImage = '\\üè¨'
                moneyMakerLevelText = 'Bev√°s√°rl√≥ k√∂zpont'
            }
        } else if (database.dataBusinesses[sender.id].businessIndex === 3) {
            if (moneyMakerLevel === 1) {
                moneyMakerImage = '\\üèóÔ∏è'
                moneyMakerLevelText = '√âp√≠t≈ëanyag gy√°r'
                uprageCost = 50000
            } else if (moneyMakerLevel === 2) {
                moneyMakerImage = '\\üè≠'
                moneyMakerLevelText = 'Aut√≥gy√°r'
            }
        } else if (database.dataBusinesses[sender.id].businessIndex === 4) {
            if (moneyMakerLevel === 1) {
                moneyMakerImage = '\\üè§'
                moneyMakerLevelText = 'V√°rosszint≈± irod√°k'
                uprageCost = 35000
            } else if (moneyMakerLevel === 2) {
                moneyMakerImage = '\\üè£'
                moneyMakerLevelText = 'Nagy iroda√©p√ºlet'
                uprageCost = 55000
            } else if (moneyMakerLevel === 3) {
                moneyMakerImage = '\\üè¢'
                moneyMakerLevelText = 'Orsz√°gszint≈± iroda√©p√ºlet'
            }
        }

        const embed = new Discord.MessageEmbed()
            .setAuthor({ name: sender.username, iconURL: sender.displayAvatarURL() })
            .setTitle(moneyMakerName)
            .setDescription(moneyMakerImage + ' ' + moneyMakerLevelText + ' (lvl' + (moneyMakerLevel - 1) + ')')
            //.addField('√Åtnevez√©s', '`.pms name [√∫j n√©v]`')
            
            if (isPrivate === true) {
                embed.addField(
                    'Megsz√ºntet√©s: üí•', 'Ez nem visszaford√≠that√≥ folyamat! Ha megsz√ºnteted a bizniszedet, minden elveszik, √©s nem kapsz vissza semmit!\n' + 
                    '\\‚õî Csak szerveren √©rhet≈ë el')
            } else {
                embed.addField('Megsz√ºntet√©s: üí•', 'Ez nem visszaford√≠that√≥ folyamat! Ha megsz√ºnteted a bizniszedet, minden elveszik, √©s nem kapsz vissza semmit!')
            }
        if (uprageCost > 0 && money >= uprageCost) {
            if (isPrivate === true) {
                embed.addField('Fejleszt√©s: ‚¨ÜÔ∏è',
                    '\\üíµ' + uprageCost + '\n' + 
                    '\\‚õî Csak szerveren √©rhet≈ë el')
            } else {
                embed.addField('Fejleszt√©s: ‚¨ÜÔ∏è', '\\üíµ' + uprageCost)
            }
        }
        if (addMoney > 0) {
                const aaaaaaaaaaaaaa = database.dataBusinesses[sender.id].businessUses.date.toString().split(':')
                const lastDate = new Date(aaaaaaaaaaaaaa[0], aaaaaaaaaaaaaa[1], aaaaaaaaaaaaaa[2])
            if (isPrivate === true) {
                embed.addField('Beszed√©s: üí∞',
                    'Utolj√°ra ekkor szedted be: ' + lastDate.getFullYear() + '.' + (lastDate.getMonth() + 1) + '.' + lastDate.getDate() + '\n' +
                    'Kb ennyit tudsz beszedni: \\üíµ' + addMoney + '\n' + 
                    '\\‚õî Csak szerveren √©rhet≈ë el')
            } else {
                embed.addField('Beszed√©s: üí∞',
                    'Utolj√°ra ekkor szedted be: ' + lastDate.getFullYear() + '.' + (lastDate.getMonth() + 1) + '.' + lastDate.getDate() + '\n' +
                    'Kb ennyit tudsz beszedni: \\üíµ' + addMoney)
            }
        }
        channel.send({ embeds: [embed] }).then(embedMessage => {
            if (isPrivate === true) return;
            if (uprageCost > 0) { if (money >= uprageCost) { embedMessage.react('‚¨ÜÔ∏è'); }; }
            if (addMoney > 0) { embedMessage.react('üí∞'); }
            embedMessage.react('üí•')
            embedMessage.awaitReactions((reaction, user) => user.id == sender.id && (reaction.emoji.name == '‚¨ÜÔ∏è' || reaction.emoji.name == 'üí∞' || reaction.emoji.name == 'üí•'),
                { max: 1, time: 60000 }).then(collected => {
                    if (collected.first().emoji.name == '‚¨ÜÔ∏è') {
                        if (uprageCost > 0) {
                            if (money >= uprageCost) {
                                database.dataBusinesses[sender.id].businessLevel += 1
                                database.dataBasic[sender.id].money -= uprageCost
                                channel.send('> \\‚¨ÜÔ∏è **Fejlesztve!**')
                            } else {
                                channel.send('> \\‚ùå **Nincs el√©g p√©nzed!**')
                            }
                        } else {
                            channel.send('> \\‚õî **Nem lehet tov√°bb fejleszteni**')
                        }
                    } else if (collected.first().emoji.name == 'üí∞') {
                        if (addMoney > 0) {
                            try {
                                addMoney += Math.floor(Math.random() * 10) - 5

                                database.dataBasic[sender.id].money += addMoney
                                database.dataBusinesses[sender.id].businessUses.day = dayOfYear;
                                database.dataBusinesses[sender.id].businessUses.date = toDateString(new Date());

                                channel.send('> \\üí∞ Beszedt√©l \\üíµ**' + addMoney + '** p√©nzt')
                            } catch (error) {
                                channel.send('> \\‚ùå ' + error.toString())
                            }
                        } else {
                            channel.send('> \\‚ùå **M√©g nem termelt semmit**')
                        }
                    } else if (collected.first().emoji.name == 'üí•') {
                        database.dataBusinesses[sender.id] = {}
                        database.dataBusinesses[sender.id].username = sender.username
                        database.dataBusinesses[sender.id].businessIndex = 0
                        channel.send('> \\üí• **A biznisz megsz√ºntetve**')
                    }
                    database.SaveDatabase()
                    embedMessage.reactions.removeAll()
                }).catch(() => {
                    embedMessage.reactions.removeAll()
                })
        })
    } else {
        if (isPrivate === true) {
            message.channel.send('> \\‚õî **Nincs bizniszed. Hogy vegy√©l egyet, haszn√°ld a `.pms` parancsot egy szerveren.**')
        } else {
            const embed = new Discord.MessageEmbed()
                .setAuthor({ name: sender.username, iconURL: sender.displayAvatarURL() })
                .setTitle('Bizniszek')
                .addField('Utassz√°ll√≠t√≥ szolg√°lat',
                    '> **Ikon:** üöó\n' +
                    '> **√År:** 21300 \\üíµ\n' +
                    '> **Haszonszerz√©s:** Minden h√©ten egyszer termel\n' +
                    '> **Maximum szint:** 4\n' +
                    '> **Egy√©b:** ' +
                    'J√°rm≈±veket venni kell hozz√°. Minn√©l t√∂bb van bel≈ële, ann√°l t√∂bbet termel. Maximum 5 j√°rm≈± lehet!')
                .addField('Kereskedelmi szak√ºzlet',
                    '> **Ikon:** üì†\n' +
                    '> **√År:** 7100 \\üíµ\n' +
                    '> **Haszonszerz√©s:** Minden nap, kiv√©ve Vas√°rnap termel\n' +
                    '> **Maximum szint:** 2')
                .addField('Gy√°r',
                    '> **Ikon:** ‚öôÔ∏è\n' +
                    '> **√År:** 11200 \\üíµ\n' +
                    '> **Haszonszerz√©s:** Minden nap, kiv√©ve h√©tv√©g√©n termel\n' +
                    '> **Maximum szint:** 2\n' +
                    '> **Egy√©b:** ' +
                    'Alkalmazottakat felvenni kell hozz√°, minn√©l t√∂bb van bel≈ële, ann√°l t√∂bbet termel. Maximum 20 alkalmazott lehet!')
                .addField('P√©nz√ºgyi szervezet [Nem el√©rhet≈ë]',
                    '> **Ikon:** üí≥\n' +
                    '> **√År:** 36800 \\üíµ\n' +
                    '> **Haszonszerz√©s:** Ha megoldasz egy matematikai m≈±veletet, azonnal termel hasznot. Naponta maximum 3-szor lehet haszn√°lni!\n' +
                    '> **Maximum szint:** 3')
            channel.send({ embeds: [embed] }).then(embedMessage => {
                if (money >= 21300) { embedMessage.react('üöó'); }
                if (money >= 7100) { embedMessage.react('üì†'); }
                if (money >= 11200) { embedMessage.react('‚öôÔ∏è'); }
                //if (money >= 36800) { embedMessage.react('üí≥'); }

                embedMessage.awaitReactions((reaction, user) => user.id == sender.id && (reaction.emoji.name == 'üöó' || reaction.emoji.name == 'üì†' || reaction.emoji.name == '‚öôÔ∏è' || reaction.emoji.name == 'üí≥'),
                    { max: 1, time: 60000 }).then(collected => {
                        if (collected.first().emoji.name == 'üöó') {
                            if (money >= 6040) {
                                businessAddToMemoryDetails(sender, database)
                                database.dataBasic[sender.id].money -= 6040
                                database.dataBusinesses[sender.id].businessIndex = 1
                                database.dataBusinesses[sender.id].businessLevel = 1
                                database.dataBusinesses[sender.id].businessName = sender.username + ' utassz√°ll√≠t√≥ szolg√°lata'
                                channel.send('> \\‚úîÔ∏è **Sikeresen megv√°s√°roltad: Utassz√°ll√≠t√≥ szolg√°lat**')
                            } else {
                                channel.send('> \\‚ùå **Nincs el√©g p√©nzed!**')
                            }
                        } else if (collected.first().emoji.name == 'üì†') {
                            if (money >= 7100) {
                                businessAddToMemoryDetails(sender, database)
                                database.dataBasic[sender.id].money -= 7100
                                database.dataBusinesses[sender.id].businessIndex = 2
                                database.dataBusinesses[sender.id].businessLevel = 1
                                database.dataBusinesses[sender.id].businessName = sender.username + ' kereskedelmi szak√ºzlete'
                                channel.send('> \\‚úîÔ∏è **Sikeresen megv√°s√°roltad: Kereskedelmi szak√ºzlet**')
                            } else {
                                channel.send('> \\‚ùå **Nincs el√©g p√©nzed!**')
                            }
                        } else if (collected.first().emoji.name == '‚öôÔ∏è') {
                            if (money >= 11200) {
                                businessAddToMemoryDetails(sender, database)
                                database.dataBasic[sender.id].money -= 11200
                                database.dataBusinesses[sender.id].businessIndex = 3
                                database.dataBusinesses[sender.id].businessLevel = 1
                                database.dataBusinesses[sender.id].businessName = sender.username + ' gy√°ra'
                                channel.send('> \\‚úîÔ∏è **Sikeresen megv√°s√°roltad: Gy√°r**')
                            } else {
                                channel.send('> \\‚ùå **Nincs el√©g p√©nzed!**')
                            }
                        } else if (collected.first().emoji.name == 'üí≥') {
                            /*if (money >= 36800) {
                                businessAddToMemoryDetails(sender, database)
                                database.dataBasic[sender.id].money -= 36800
                                database.dataBusinesses[sender.id].businessIndex = 4
                                database.dataBusinesses[sender.id].businessLevel = 1
                                database.dataBusinesses[sender.id].businessName = sender.username + ' p√©nz√ºgyi szervezete'
                                channel.send('> \\‚úîÔ∏è **Sikeresen megv√°s√°roltad!**')
                            } else {
                                channel.send('> \\‚ùå **Nincs el√©g p√©nzed!**')
                            }*/
                            channel.send('> \\‚ùå **Nem el√©rhet≈ë**')
                        }
                        embedMessage.reactions.removeAll()
                    }).catch(() => {
                        embedMessage.reactions.removeAll()
                    })
            });
        }
    }

    database.SaveDatabase()
}